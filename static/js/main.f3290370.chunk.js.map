{"version":3,"sources":["components/Button/index.jsx","components/Input/index.jsx","components/Form/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","children","onClick","text","className","Input","label","type","props","htmlFor","id","Form","onSubmit","App","useState","userData","setUserData","onChangeInput","event","target","value","showErrors","preventDefault","name","email","password","length","console","log","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wSAceA,G,YAXA,SAAC,GAAD,IACbC,EADa,EACbA,SADa,IAGbC,eAHa,MAGH,kBAAM,MAHH,MAIbC,YAJa,MAIN,kBAJM,SAMb,4BAAQC,UAAU,MAAMF,QAASA,GAC9BD,GAAYE,K,eCIFE,G,MAXD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,IAAUC,YAAV,MAAiB,OAAjB,EAA4BC,EAA5B,uCACZ,oCACGF,GACC,2BAAOG,QAASD,EAAME,GAAIN,UAAU,SACjCE,GAGL,yCAAOF,UAAU,QAAQG,KAAMA,GAAUC,OCE9BG,EAPF,SAAC,GAAD,IAAGV,EAAH,EAAGA,SAAUW,EAAb,EAAaA,SAAb,OACX,0BAAMR,UAAU,OAAOQ,SAAUA,GAC9BX,EACD,kBAAC,EAAD,iBC+DWY,MAjEf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,KAEPC,EAAgB,SAACC,GAAD,OACpBF,EAAY,2BAAKD,GAAN,kBAAiBG,EAAMC,OAAOT,GAAKQ,EAAMC,OAAOC,UAMzDC,EAAa,SAACH,GAEhB,OADAA,EAAMI,kBAEHP,EAASQ,KAAON,EACZF,EAASQ,KAAO,GACjB,oBACHR,EAASS,MAAQP,EAAiBZ,OAAQ,EAAQ,qBAClDU,EAASU,SAAWR,EACjBZ,MAAMqB,OAAS,EACf,wCAUR,OACE,yBAAKtB,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAMQ,SANHG,EAASQ,MAAQR,EAASS,OAAST,EAASU,WAAaJ,EArB7C,SAACH,GACpBA,EAAMI,iBACNK,QAAQC,IAAIb,IAyBwC,MAC9C,kBAAC,EAAD,CACEL,GAAG,OACHJ,MAAM,YACNuB,YAAY,OACZC,SAAUb,EACVV,KAAK,OACLa,MAAOL,EAASQ,OAElB,yBAAKnB,UAAU,aACf,kBAAC,EAAD,CACEM,GAAG,QACHJ,MAAM,aACNuB,YAAY,QACZC,SAAUb,EACVV,KAAK,QACLa,MAAOL,EAASS,QAElB,yBAAKpB,UAAU,aACf,kBAAC,EAAD,CACEM,GAAG,WACHJ,MAAM,gBACNuB,YAAY,WACZC,SAAUb,EACVV,KAAK,WACLa,MAAOL,EAASU,WAElB,yBAAKrB,UAAU,iBCpDL2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.f3290370.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nconst Button = ({\r\n  children,\r\n  //disabled,\r\n  onClick = () => null,\r\n  text = \"click me badly!\",\r\n}) => (\r\n  <button className=\"btn\" onClick={onClick} /*disabled={disabled}*/>\r\n    {children || text}\r\n  </button>\r\n);\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./Input.css\";\r\n\r\nconst Input = ({ label, type = \"text\", ...props }) => (\r\n  <>\r\n    {label && (\r\n      <label htmlFor={props.id} className=\"label\">\r\n        {label}\r\n      </label>\r\n    )}\r\n    <input className=\"input\" type={type} {...props} />\r\n  </>\r\n);\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport Button from \"../Button\";\r\nimport \"./Form.css\";\r\nimport Input from \"../Input\";\r\n\r\nconst Form = ({ children, onSubmit }) => (\r\n  <form className=\"form\" onSubmit={onSubmit}>\r\n    {children}\r\n    <Button /*disabled={!onSubmit}*/>Submit</Button>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Form from \"./components/Form\";\r\nimport Input from \"./components/Input\";\r\nimport Button from \"./components/Button\";\r\n\r\nfunction App() {\r\n  const [userData, setUserData] = useState({});\r\n  const onChangeInput = (event) =>\r\n    setUserData({ ...userData, [event.target.id]: event.target.value });\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(userData);\r\n  };\r\n\r\n  let showErrors = (event) => {\r\n    event.preventDefault();\r\n    return (\r\n      (userData.name = onChangeInput\r\n        ? (userData.name = \"\")\r\n        : \"Type your name\") &&\r\n      (userData.email = onChangeInput ? (Input = !\"@\") : \"Email not valid\") &&\r\n      (userData.password = onChangeInput\r\n        ? Input.length < 6\r\n        : \"Password must be 6 characters long!\")\r\n    );\r\n  };\r\n\r\n  const validateForm = () => {\r\n    //return userData.password && userData.password === userData.confirmPassword;\r\n    //return showErrors;\r\n    return userData.name && userData.email && userData.password === showErrors;\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"container\">\r\n        <Form onSubmit={validateForm() ? onFormSubmit : null}>\r\n          <Input\r\n            id=\"name\"\r\n            label=\"Your name\"\r\n            placeholder=\"Name\"\r\n            onChange={onChangeInput}\r\n            type=\"text\"\r\n            value={userData.name}\r\n          />\r\n          <div className=\"emessage\"></div>\r\n          <Input\r\n            id=\"email\"\r\n            label=\"Your email\"\r\n            placeholder=\"Email\"\r\n            onChange={onChangeInput}\r\n            type=\"email\"\r\n            value={userData.email}\r\n          />\r\n          <div className=\"emessage\"></div>\r\n          <Input\r\n            id=\"password\"\r\n            label=\"Your password\"\r\n            placeholder=\"Password\"\r\n            onChange={onChangeInput}\r\n            type=\"password\"\r\n            value={userData.password}\r\n          />\r\n          <div className=\"emessage\"></div>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}